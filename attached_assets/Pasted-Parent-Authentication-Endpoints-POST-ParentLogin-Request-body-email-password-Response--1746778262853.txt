Parent Authentication Endpoints:
POST /ParentLogin
Request body: { email, password }
Response: { role: "Parent", school: {_id, schoolName}, _id, name, email }
POST /ParentReg
Request body: { name, email, password, adminID, school, students: [studentIds] }
Response: { message: "Parent registered successfully" }
Parent Management Endpoints:
GET /Parents/:adminId
Response: [
  {
    _id: string,
    name: string,
    email: string,
    students: [
      {
        _id: string,
        name: string,
        rollNum: string,
        sclassName: string
      }
    ]
  }
]
GET /Parent/:parentId  
Response: {
  _id: string,
  name: string,
  email: string,
  school: {
    _id: string,
    schoolName: string
  },
  students: [
    {
      _id: string, 
      name: string,
      rollNum: string,
      sclassName: string,
      attendance: [
        {
          date: string,
          status: "Present" | "Absent"
        }
      ],
      marks: [
        {
          subjectName: string,
          marksObtained: number,
          totalMarks: number
        }
      ]
    }
  ]
}
PUT /Parent/:parentId
Request body: { name, email, currentPassword, newPassword }
Response: { message: "Parent updated successfully" }
DELETE /Parent/:parentId  
Response: { message: "Parent deleted successfully" }
Parent-Student Related Endpoints:
GET /students/parent/:parentId
Response: [
  {
    _id: string,
    name: string,
    rollNum: string,
    sclassName: string,
    attendance: [
      {
        date: string,
        status: "Present" | "Absent" 
      }
    ]
  }
]
GET /student/attendance/:studentId
Response: {
  attendance: [
    {
      date: string,
      status: "Present" | "Absent"
    }
  ],
  totalClasses: number,
  attendedClasses: number,
  percentage: number
}
Parent Notice Board Endpoints:
GET /NoticeList/:parentId
Response: [
  {
    _id: string,
    title: string, 
    details: string,
    date: string,
    school: string
  }
]
The backend should implement proper authentication middleware and error handling. All responses should include appropriate HTTP status codes (200 for success, 400 for bad requests, 401 for unauthorized, 404 for not found, etc.).

For error responses, use this format:

{
  message: string  // Error message
  error?: any     // Optional detailed error info
}
This API structure supports all the parent-related functionality shown in your React frontend code.